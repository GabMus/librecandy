{
  "_args": [
    [
      {
        "raw": "@material/checkbox@^0.3.2",
        "scope": "@material",
        "escapedName": "@material%2fcheckbox",
        "name": "@material/checkbox",
        "rawSpec": "^0.3.2",
        "spec": ">=0.3.2 <0.4.0",
        "type": "range"
      },
      "/home/federico/git/librecandy/doc/demo-mockup/node_modules/material-components-web"
    ]
  ],
  "_from": "@material/checkbox@>=0.3.2 <0.4.0",
  "_id": "@material/checkbox@0.3.2",
  "_inCache": true,
  "_location": "/@material/checkbox",
  "_nodeVersion": "6.9.2",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/checkbox-0.3.2.tgz_1493653383911_0.523208272177726"
  },
  "_npmUser": {
    "name": "amsheehan",
    "email": "alex.m.sheehan@gmail.com"
  },
  "_npmVersion": "3.10.9",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@material/checkbox@^0.3.2",
    "scope": "@material",
    "escapedName": "@material%2fcheckbox",
    "name": "@material/checkbox",
    "rawSpec": "^0.3.2",
    "spec": ">=0.3.2 <0.4.0",
    "type": "range"
  },
  "_requiredBy": [
    "/material-components-web"
  ],
  "_resolved": "https://registry.npmjs.org/@material/checkbox/-/checkbox-0.3.2.tgz",
  "_shasum": "17f7334f034144a664928ca43c11afbdb7dc563e",
  "_shrinkwrap": null,
  "_spec": "@material/checkbox@^0.3.2",
  "_where": "/home/federico/git/librecandy/doc/demo-mockup/node_modules/material-components-web",
  "bugs": {
    "url": "https://github.com/material-components/material-components-web/issues"
  },
  "dependencies": {
    "@material/animation": "^0.2.0",
    "@material/base": "^0.1.2",
    "@material/ripple": "^0.6.0",
    "@material/rtl": "^0.1.3",
    "@material/theme": "^0.1.4"
  },
  "description": "The Material Components for the web checkbox component",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "17f7334f034144a664928ca43c11afbdb7dc563e",
    "tarball": "https://registry.npmjs.org/@material/checkbox/-/checkbox-0.3.2.tgz"
  },
  "homepage": "https://github.com/material-components/material-components-web#readme",
  "keywords": [
    "material components",
    "material design",
    "checkbox"
  ],
  "license": "Apache-2.0",
  "main": "index.js",
  "maintainers": [
    {
      "name": "amsheehan",
      "email": "alex.m.sheehan@gmail.com"
    },
    {
      "name": "bwobrien",
      "email": "obrien.test@gmail.com"
    },
    {
      "name": "cristobalchao",
      "email": "cchao87@gmail.com"
    },
    {
      "name": "ljepsen3541",
      "email": "ljepsen3541@gmail.com"
    },
    {
      "name": "material-admin",
      "email": "traviskaufman+npm@google.com"
    },
    {
      "name": "sgomes",
      "email": "mail@sgomes.io"
    },
    {
      "name": "traviskaufman",
      "email": "travis.kaufman@gmail.com"
    },
    {
      "name": "yeelan0319",
      "email": "yiranmao@gmail.com"
    }
  ],
  "name": "@material/checkbox",
  "optionalDependencies": {},
  "readme": "# MDC Checkbox\n\nThe MDC Checkbox component is a spec-aligned checkbox component adhering to the\n[Material Design checkbox requirements](https://material.google.com/components/selection-controls.html#selection-controls-checkbox).\nIt works without JavaScript with basic functionality for all states. If you use the JavaScript object for a checkbox, it will add more intricate animation effects when switching between states.\n\n## Installation\n\n```\nnpm install --save @material/checkbox\n```\n\n## Usage\n\n### Standalone Checkbox\n\n```html\n<div class=\"mdc-checkbox\">\n  <input type=\"checkbox\"\n         class=\"mdc-checkbox__native-control\"/>\n  <div class=\"mdc-checkbox__background\">\n    <svg class=\"mdc-checkbox__checkmark\"\n         viewBox=\"0 0 24 24\">\n      <path class=\"mdc-checkbox__checkmark__path\"\n            fill=\"none\"\n            stroke=\"white\"\n            d=\"M1.73,12.91 8.1,19.28 22.79,4.59\"/>\n    </svg>\n    <div class=\"mdc-checkbox__mixedmark\"></div>\n  </div>\n</div>\n```\n\nThe checkbox component is driven by an underlying native checkbox element. This element is sized and\npositioned the same way as the checkbox component itself, allowing for proper behavior of assistive\ndevices.\n\nYou can also add an `mdc-checkbox--theme-dark` modifier class to the component to use the dark theme\ncheckbox styles.\n\nAdditionally, the checkbox can be used in conjunction with [mdc-form-field](../mdc-form-field) to\neasily position checkboxes and their labels.\n\n```html\n<div class=\"mdc-form-field\">\n  <div class=\"mdc-checkbox\">\n    <input type=\"checkbox\"\n           id=\"my-checkbox\"\n           class=\"mdc-checkbox__native-control\"/>\n    <div class=\"mdc-checkbox__background\">\n      <svg class=\"mdc-checkbox__checkmark\"\n           viewBox=\"0 0 24 24\">\n        <path class=\"mdc-checkbox__checkmark__path\"\n              fill=\"none\"\n              stroke=\"white\"\n              d=\"M1.73,12.91 8.1,19.28 22.79,4.59\"/>\n      </svg>\n      <div class=\"mdc-checkbox__mixedmark\"></div>\n    </div>\n  </div>\n\n  <label for=\"my-checkbox\">My Checkbox Label</label>\n</div>\n```\n\n#### Disabled Checkboxes\n\n```html\n<div class=\"mdc-checkbox mdc-checkbox--disabled\">\n  <input type=\"checkbox\"\n         id=\"basic-disabled-checkbox\"\n         class=\"mdc-checkbox__native-control\"\n         disabled />\n  <div class=\"mdc-checkbox__background\">\n    <svg class=\"mdc-checkbox__checkmark\"\n         viewBox=\"0 0 24 24\">\n      <path class=\"mdc-checkbox__checkmark__path\"\n            fill=\"none\"\n            stroke=\"white\"\n            d=\"M1.73,12.91 8.1,19.28 22.79,4.59\"/>\n    </svg>\n    <div class=\"mdc-checkbox__mixedmark\"></div>\n  </div>\n</div>\n<label for=\"basic-disabled-checkbox\" id=\"basic-disabled-checkbox-label\">This is my disabled checkbox</label>\n```\n\nNote that `mdc-checkbox--disabled` is necessary on the root element to prevent hover states from activating.\n\n### Using the JS Component\n\nMDC Checkbox ships with a Component / Foundation combo which progressively enhances the checkbox\nstate transitions to achieve full parity with the material design motion for switching checkbox\nstates.\n\n#### Including in code\n\n##### ES2015\n\n```javascript\nimport {MDCCheckbox, MDCCheckboxFoundation} from 'mdc-checkbox';\n```\n\n##### CommonJS\n\n```javascript\nconst mdcCheckbox = require('mdc-checkbox');\nconst MDCCheckbox = mdcCheckbox.MDCCheckbox;\nconst MDCCheckboxFoundation = mdcCheckbox.MDCCheckboxFoundation;\n```\n\n##### AMD\n\n```javascript\nrequire(['path/to/mdc-checkbox'], mdcCheckbox => {\n  const MDCCheckbox = mdcCheckbox.MDCCheckbox;\n  const MDCCheckboxFoundation = mdcCheckbox.MDCCheckboxFoundation;\n});\n```\n\n##### Global\n\n```javascript\nconst MDCCheckbox = mdc.checkbox.MDCCheckbox;\nconst MDCCheckboxFoundation = mdc.checkbox.MDCCheckboxFoundation;\n```\n\n#### Automatic Instantiation\n\nIf you do not care about retaining the component instance for the checkbox, simply call `attachTo()`\nand pass it a DOM element.\n\n```javascript\nmdc.checkbox.MDCCheckbox.attachTo(document.querySelector('.mdc-checkbox'));\n```\n\n#### Manual Instantiation\n\nCheckboxes can easily be initialized using their default constructors as well, similar to `attachTo`.\n\n```javascript\nimport {MDCCheckbox} from 'mdc-checkbox';\n\nconst checkbox = new MDCCheckbox(document.querySelector('.mdc-checkbox'));\n```\n\n#### MDCCheckbox API\n\nThe MDCCheckbox API provides accessor properties similar to those found on a native checkbox element.\n\n##### MDCCheckbox.checked\n\nBoolean. Returns whether or not the checkbox is checked. Setting this property will update the\nunderlying checkbox element.\n\n##### MDCCheckbox.indeterminate\n\nBoolean. Returns whether or not the checkbox is indeterminate. Setting this property will update the\nunderlying checkbox element.\n\n##### MDCCheckbox.disabled\n\nBoolean. Returns whether or not the checkbox is disabled. Setting this property will update the\nunderlying checkbox element.\n\n##### MDCCheckbox.value\n\nString. Returns the checkbox's value. Setting this property will update the underlying checkbox\nelement.\n\n### Using the Foundation Class\n\nMDC Checkbox ships with an `MDCCheckboxFoundation` class that external frameworks and libraries can\nuse to integrate the component. As with all foundation classes, an adapter object must be provided.\nThe adapter for checkboxes must provide the following functions, with correct signatures:\n\n| Method Signature | Description |\n| --- | --- |\n| `addClass(className: string) => void` | Adds a class to the root element. |\n| `removeClass(className: string) => void` | Removes a class from the root element. |\n| `registerAnimationEndHandler(handler: EventListener) => void` | Registers an event handler to be called when an `animationend` event is triggered on the root element. Note that you must account for\nvendor prefixes in order for this to work correctly. |\n| `deregisterAnimationEndHandler(handler: EventListener) => void` | Deregisters an event handler from an `animationend` event listener. This will only be called with handlers that have previously been passed to `registerAnimationEndHandler` calls. |\n| `registerChangeHandler(handler: EventListener) => void` | Registers an event handler to be called when a `change` event is triggered on the native control (_not_ the root element). |\n| `deregisterChangeHandler(handler: EventListener) => void` | Deregisters an event handler that was previously passed to `registerChangeHandler`. |\n| `getNativeControl() => HTMLInputElement?` | Returns the native checkbox control, if available. Note that if this control is not available, the methods that rely on it will exit gracefully.|\n| `forceLayout() => void` | Force-trigger a layout on the root element. This is needed to restart\nanimations correctly. If you find that you do not need to do this, you can simply make it a no-op. |\n| `isAttachedToDOM() => boolean` | Returns true if the component is currently attached to the DOM, false otherwise.` |\n\n#### MDCCheckboxFoundation API\n\n##### MDCCheckboxFoundation.isChecked() => boolean\n\nReturns whether or not the underlying input is checked. Returns false when no input is available.\n\n##### MDCCheckboxFoundation.setChecked(checked: boolean)\n\nUpdates the `checked` property on the underlying input. Does nothing when the underlying input is\nnot present.\n\n##### MDCCheckboxFoundation.isIndeterminate() => boolean\n\nReturns whether or not the underlying input is indeterminate. Returns false when no input is\navailable.\n\n##### MDCCheckboxFoundation.setIndeterminate(indeterminate: boolean)\n\nUpdates the `indeterminate` property on the underlying input. Does nothing when the underlying input\nis not present.\n\n##### MDCCheckboxFoundation.isDisabled() => boolean\n\nReturns whether or not the underlying input is disabled. Returns false when no input is available.\n\n##### MDCCheckboxFoundation.setDisabled(disabled: boolean)\n\nUpdates the `disabled` property on the underlying input. Does nothing when the underlying input is\nnot present.\n\n##### MDCCheckboxFoundation.getValue() => string\n\nReturns the value of `adapter.getNativeControl().value`. Returns `null` if `getNativeControl()`\ndoes not return an object.\n\n##### MDCCheckboxFoundation.setValue(value: string) => void\n\nSets the value of `adapter.getNativeControl().value`. Does nothing if `getNativeControl()` does\nnot return an object.\n\n## Theming\n\n> TK once mdc-theming lands.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/material-components/material-components-web.git"
  },
  "scripts": {},
  "version": "0.3.2"
}
