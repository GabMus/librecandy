{
  "_args": [
    [
      {
        "raw": "@material/rtl@^0.1.3",
        "scope": "@material",
        "escapedName": "@material%2frtl",
        "name": "@material/rtl",
        "rawSpec": "^0.1.3",
        "spec": ">=0.1.3 <0.2.0",
        "type": "range"
      },
      "/home/federico/git/librecandy/doc/demo-mockup/node_modules/@material/checkbox"
    ]
  ],
  "_from": "@material/rtl@>=0.1.3 <0.2.0",
  "_id": "@material/rtl@0.1.3",
  "_inCache": true,
  "_location": "/@material/rtl",
  "_nodeVersion": "7.6.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/rtl-0.1.3.tgz_1492527085132_0.29882555012591183"
  },
  "_npmUser": {
    "name": "traviskaufman",
    "email": "travis.kaufman@gmail.com"
  },
  "_npmVersion": "4.1.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@material/rtl@^0.1.3",
    "scope": "@material",
    "escapedName": "@material%2frtl",
    "name": "@material/rtl",
    "rawSpec": "^0.1.3",
    "spec": ">=0.1.3 <0.2.0",
    "type": "range"
  },
  "_requiredBy": [
    "/@material/checkbox",
    "/@material/dialog",
    "/@material/drawer",
    "/@material/form-field",
    "/@material/grid-list",
    "/@material/list",
    "/@material/select",
    "/@material/snackbar",
    "/@material/textfield",
    "/@material/toolbar"
  ],
  "_resolved": "https://registry.npmjs.org/@material/rtl/-/rtl-0.1.3.tgz",
  "_shasum": "87097b0aa7f56c1748a2a3a2edd0463783bfacd5",
  "_shrinkwrap": null,
  "_spec": "@material/rtl@^0.1.3",
  "_where": "/home/federico/git/librecandy/doc/demo-mockup/node_modules/@material/checkbox",
  "bugs": {
    "url": "https://github.com/material-components/material-components-web/issues"
  },
  "dependencies": {},
  "description": "Material Components for the web RTL Scss helpers",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "87097b0aa7f56c1748a2a3a2edd0463783bfacd5",
    "tarball": "https://registry.npmjs.org/@material/rtl/-/rtl-0.1.3.tgz"
  },
  "homepage": "https://github.com/material-components/material-components-web#readme",
  "keywords": [
    "material components",
    "material design",
    "rtl",
    "right to left"
  ],
  "license": "Apache-2.0",
  "maintainers": [
    {
      "name": "amsheehan",
      "email": "alex.m.sheehan@gmail.com"
    },
    {
      "name": "bwobrien",
      "email": "obrien.test@gmail.com"
    },
    {
      "name": "cristobalchao",
      "email": "cchao87@gmail.com"
    },
    {
      "name": "ljepsen3541",
      "email": "ljepsen3541@gmail.com"
    },
    {
      "name": "material-admin",
      "email": "traviskaufman+npm@google.com"
    },
    {
      "name": "sgomes",
      "email": "mail@sgomes.io"
    },
    {
      "name": "traviskaufman",
      "email": "travis.kaufman@gmail.com"
    },
    {
      "name": "yeelan0319",
      "email": "yiranmao@gmail.com"
    }
  ],
  "name": "@material/rtl",
  "optionalDependencies": {},
  "readme": "# MDC RTL\n\nMDC RTL provides sass mixins to assist with RTL / bi-directional layouts within MDC-Web components.\nBecause we would like to achieve a standard approach to RTL throughout MDC-Web, we highly recommend\nthat any MDC-Web component that needs RTL support leverage this package.\n\n## Installation\n\n```\nnpm install --save @material/rtl\n```\n\n## Usage\n\nSimply `@import \"@material/rtl/mixins\";` and start using the mixins. Each mixin is described below.\n\n### mdc-rtl\n\n```scss\n@mixin mdc-rtl($root-selector: null)\n```\n\nCreates a rule that will be applied when an MDC-Web component is within the context of an RTL layout.\n\nUsage Example:\n\n```scss\n.mdc-foo {\n  position: absolute;\n  left: 0;\n\n  @include mdc-rtl {\n    left: auto;\n    right: 0;\n  }\n\n  &__bar {\n    margin-left: 4px;\n    @include mdc-rtl(\".mdc-foo\") {\n      margin-left: auto;\n      margin-right: 4px;\n    }\n  }\n}\n\n.mdc-foo--mod {\n  padding-left: 4px;\n\n  @include mdc-rtl {\n    padding-left: auto;\n    padding-right: 4px;\n  }\n}\n```\n\nwill emit the following css:\n\n```css\n.mdc-foo {\n  position: absolute;\n  left: 0;\n}\n[dir=\"rtl\"] .mdc-foo, .mdc-foo[dir=\"rtl\"] {\n  left: auto;\n  right: 0;\n}\n.mdc-foo__bar {\n  margin-left: 4px;\n}\n[dir=\"rtl\"] .mdc-foo .mdc-foo__bar, .mdc-foo[dir=\"rtl\"] .mdc-foo__bar {\n  margin-left: auto;\n  margin-right: 4px;\n}\n\n.mdc-foo--mod {\n  padding-left: 4px;\n}\n[dir=\"rtl\"] .mdc-foo--mod, .mdc-foo--mod[dir=\"rtl\"] {\n  padding-left: auto;\n  padding-right: 4px;\n}\n```\n*N.B.**: checking for `[dir=\"rtl\"]` on an ancestor element works in most cases, it will sometimes\nlead to false negatives for more complex layouts, e.g.\n\n```html\n<html dir=\"rtl\">\n  <!-- ... -->\n  <div dir=\"ltr\">\n    <div class=\"mdc-foo\">Styled incorrectly as RTL!</div>\n  </div>\n</html>\n```\n\nUnfortunately, we've found that this is the best we can do for now. In the future, selectors such\nas [:dir](http://mdn.io/:dir) will help us mitigate this.\n\n### mdc-rtl-reflexive-box\n\n```scss\n@mixin mdc-rtl-reflexive-box($base-property, $default-direction, $value, $root-selector: null)\n```\n\nTakes a base box-model property - e.g. margin / border / padding - along with a default\ndirection and value, and emits rules which apply the value to the\n`#{$base-property}-#{$default-direction}` property by default, but flips the direction\nwhen within an RTL context.\n\nFor example:\n\n```scss\n.mdc-foo {\n  @include mdc-rtl-reflexive-box(margin, left, 8px);\n}\n```\nis equivalent to:\n\n```scss\n.mdc-foo {\n  margin-left: 8px;\n\n  @include mdc-rtl {\n    margin-right: 8px;\n    margin-left: 0;\n  }\n}\n```\n\nWhereas:\n\n```scss\n.mdc-foo {\n  @include mdc-rtl-reflexive-box(margin, right, 8px);\n}\n```\nis equivalent to:\n\n```scss\n.mdc-foo {\n  margin-right: 8px;\n\n  @include mdc-rtl {\n    margin-right: 0;\n    margin-left: 8px;\n  }\n}\n```\n\nYou can also pass a 4th optional $root-selector argument which will be forwarded to `mdc-rtl`,\ne.g. `@include mdc-rtl-reflexive-box-property(margin, left, 8px, \".mdc-component\")`.\n\nNote that this function will always zero out the original value in an RTL context. If you're\ntrying to flip the values, use `mdc-rtl-reflexive-property`.\n\n### mdc-rtl-reflexive-property\n\n```scss\n@mixin mdc-rtl-reflexive-property($base-property, $left-value, $right-value, $root-selector: null)\n```\n\nTakes a base property and emits rules that assign <base-property>-left to <left-value> and\n<base-property>-right to <right-value> in a LTR context, and vice versa in a RTL context.\n\nFor example:\n\n```scss\n.mdc-foo {\n  @include mdc-rtl-reflexive-property(margin, auto, 12px);\n}\n```\nis equivalent to:\n\n```scss\n.mdc-foo {\n  margin-left: auto;\n  margin-right: 12px;\n\n  @include mdc-rtl {\n    margin-left: 12px;\n    margin-right: auto;\n  }\n}\n```\n\nA 4th optional $root-selector argument can be given, which will be passed to `mdc-rtl`.\n\n### mdc-rtl-reflexive-position\n\n```scss\n@mixin mdc-rtl-reflexive-position($pos, $value, $root-selector: null)\n```\n\nTakes an argument specifying a horizontal position property (either \"left\" or \"right\") as well\nas a value, and applies that value to the specified position in a LTR context, and flips it in a\nRTL context.\n\nFor example:\n\n```scss\n.mdc-foo {\n  @include mdc-rtl-reflexive-position(left, 0);\n  position: absolute;\n}\n```\nis equivalent to:\n\n```scss\n .mdc-foo {\n   position: absolute;\n   left: 0;\n   right: initial;\n\n   @include mdc-rtl {\n     right: 0;\n     left: initial;\n   }\n }\n```\n\nAn optional third $root-selector argument may also be given, which is passed to `mdc-rtl`.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/material-components/material-components-web.git"
  },
  "scripts": {},
  "version": "0.1.3"
}
