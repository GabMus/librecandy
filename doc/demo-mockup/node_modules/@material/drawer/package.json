{
  "_args": [
    [
      {
        "raw": "@material/drawer@^0.4.0",
        "scope": "@material",
        "escapedName": "@material%2fdrawer",
        "name": "@material/drawer",
        "rawSpec": "^0.4.0",
        "spec": ">=0.4.0 <0.5.0",
        "type": "range"
      },
      "/home/federico/git/librecandy/doc/demo-mockup/node_modules/material-components-web"
    ]
  ],
  "_from": "@material/drawer@>=0.4.0 <0.5.0",
  "_id": "@material/drawer@0.4.0",
  "_inCache": true,
  "_location": "/@material/drawer",
  "_nodeVersion": "6.9.2",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/drawer-0.4.0.tgz_1493653384309_0.11078392574563622"
  },
  "_npmUser": {
    "name": "amsheehan",
    "email": "alex.m.sheehan@gmail.com"
  },
  "_npmVersion": "3.10.9",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@material/drawer@^0.4.0",
    "scope": "@material",
    "escapedName": "@material%2fdrawer",
    "name": "@material/drawer",
    "rawSpec": "^0.4.0",
    "spec": ">=0.4.0 <0.5.0",
    "type": "range"
  },
  "_requiredBy": [
    "/material-components-web"
  ],
  "_resolved": "https://registry.npmjs.org/@material/drawer/-/drawer-0.4.0.tgz",
  "_shasum": "d5825e3704887916216cb463f116bc4579ce40f8",
  "_shrinkwrap": null,
  "_spec": "@material/drawer@^0.4.0",
  "_where": "/home/federico/git/librecandy/doc/demo-mockup/node_modules/material-components-web",
  "bugs": {
    "url": "https://github.com/material-components/material-components-web/issues"
  },
  "dependencies": {
    "@material/animation": "^0.2.0",
    "@material/base": "^0.1.2",
    "@material/elevation": "^0.1.5",
    "@material/rtl": "^0.1.3",
    "@material/theme": "^0.1.4",
    "@material/typography": "^0.2.1"
  },
  "description": "The Material Components Web drawer component",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "d5825e3704887916216cb463f116bc4579ce40f8",
    "tarball": "https://registry.npmjs.org/@material/drawer/-/drawer-0.4.0.tgz"
  },
  "homepage": "https://github.com/material-components/material-components-web#readme",
  "keywords": [
    "material components",
    "material design",
    "navigation",
    "drawer"
  ],
  "license": "Apache-2.0",
  "main": "index.js",
  "maintainers": [
    {
      "name": "amsheehan",
      "email": "alex.m.sheehan@gmail.com"
    },
    {
      "name": "bwobrien",
      "email": "obrien.test@gmail.com"
    },
    {
      "name": "cristobalchao",
      "email": "cchao87@gmail.com"
    },
    {
      "name": "ljepsen3541",
      "email": "ljepsen3541@gmail.com"
    },
    {
      "name": "material-admin",
      "email": "traviskaufman+npm@google.com"
    },
    {
      "name": "sgomes",
      "email": "mail@sgomes.io"
    },
    {
      "name": "traviskaufman",
      "email": "travis.kaufman@gmail.com"
    },
    {
      "name": "yeelan0319",
      "email": "yiranmao@gmail.com"
    }
  ],
  "name": "@material/drawer",
  "optionalDependencies": {},
  "readme": "# MDC Drawer\n\nThe MDC Drawer component is a spec-aligned drawer component adhering to the\n[Material Design navigation drawer pattern](https://material.google.com/patterns/navigation-drawer.html).\nIt implements permanent, persistent, and temporary drawers. Permanent drawers are CSS-only and require no JavaScript, whereas persistent and temporary drawers require JavaScript to function, in order to respond to\nuser interaction.\n\n## Installation\n\n```\nnpm install --save @material/drawer\n```\n\n## Permanent drawer usage\n\nA permanent drawer is always open, sitting to the side of the content. It is appropriate for any display size larger\nthan mobile.\n\n> TODO(sgomes): Give advice on how to hide permanent drawer in mobile.\n\n```html\n<nav class=\"mdc-permanent-drawer mdc-typography\">\n  <div class=\"mdc-permanent-drawer__toolbar-spacer\"></div>\n  <div class=\"mdc-permanent-drawer__content\">\n    <nav id=\"icon-with-text-demo\" class=\"mdc-list\">\n      <a class=\"mdc-list-item mdc-permanent-drawer--selected\" href=\"#\">\n        <i class=\"material-icons mdc-list-item__start-detail\" aria-hidden=\"true\">inbox</i>Inbox\n      </a>\n      <a class=\"mdc-list-item\" href=\"#\">\n        <i class=\"material-icons mdc-list-item__start-detail\" aria-hidden=\"true\">star</i>Star\n      </a>\n    </nav>\n  </div>\n</nav>\n<div>\n  Toolbar and page content go inside here.\n</div>\n```\n\nIn the example above, we've set the drawer above the toolbar, and are using a toolbar spacer to ensure that it is\npresented correctly, with the correct amount of space to match the toolbar height. Note that you can place content\ninside the toolbar spacer.\n\nPermanent drawers can also be set below the toolbar:\n\n```html\n<div>Toolbar goes here</div>\n\n<div class=\"content\">\n  <nav class=\"mdc-permanent-drawer mdc-typography\">\n    <nav id=\"icon-with-text-demo\" class=\"mdc-list\">\n      <a class=\"mdc-list-item mdc-permanent-drawer--selected\" href=\"#\">\n        <i class=\"material-icons mdc-list-item__start-detail\" aria-hidden=\"true\">inbox</i>Inbox\n      </a>\n      <a class=\"mdc-list-item\" href=\"#\">\n        <i class=\"material-icons mdc-list-item__start-detail\" aria-hidden=\"true\">star</i>Star\n      </a>\n    </nav>\n  <main>\n    Page content goes here.\n  </main>\n</div>\n```\n\nCSS classes:\n\n| Class                                  | Description                                                                |\n| -------------------------------------- | -------------------------------------------------------------------------- |\n| `mdc-permanent-drawer`                 | Mandatory. Needs to be set on the root element of the component.           |\n| `mdc-permanent-drawer__content`        | Mandatory. Needs to be set on the container node for the drawer content.   |\n| `mdc-permanent-drawer__toolbar-spacer` | Optional. Add to node to provide the matching amount of space for toolbar. |\n\n## Persistent drawer usage\n\nPersistent drawers can be toggled open or closed. The drawer sits on the same surface elevation as the content. It is closed by default. When the drawer is outside of the page grid and opens, the drawer forces other content to change size and adapt to the smaller viewport. Persistent drawers stay open until closed by the user.\n\nPersistent drawers are acceptable for all sizes larger than mobile.\n\n```html\n<aside class=\"mdc-persistent-drawer mdc-typography\">\n  <nav class=\"mdc-persistent-drawer__drawer\">\n    <header class=\"mdc-persistent-drawer__header\">\n      <div class=\"mdc-persistent-drawer__header-content\">\n        Header here\n      </div>\n    </header>\n    <nav id=\"icon-with-text-demo\" class=\"mdc-persistent-drawer__content mdc-list\">\n      <a class=\"mdc-list-item mdc-persistent-drawer--selected\" href=\"#\">\n        <i class=\"material-icons mdc-list-item__start-detail\" aria-hidden=\"true\">inbox</i>Inbox\n      </a>\n      <a class=\"mdc-list-item\" href=\"#\">\n        <i class=\"material-icons mdc-list-item__start-detail\" aria-hidden=\"true\">star</i>Star\n      </a>\n    </nav>\n  </nav>\n</aside>\n```\n\n```js\nlet drawer = new mdc.drawer.MDCPersistentDrawer(document.querySelector('.mdc-persistent-drawer'));\ndocument.querySelector('.menu').addEventListener('click', () => drawer.open = true);\n```\n\nCSS classes:\n\n| Class                                  | Description                                                                |\n| -------------------------------------- | -------------------------------------------------------------------------- |\n| `mdc-persistent-drawer`                 | Mandatory. Needs to be set on the root element of the component.           |\n| `mdc-persistent-drawer__drawer`         | Mandatory. Needs to be set on the container node for the drawer content.   |\n\n### Using the JS Component\n\nMDC Persistent Drawer ships with a Component / Foundation combo which allows for frameworks to richly integrate the\ncorrect drawer behaviors into idiomatic components.\n\n#### Including in code\n\n##### ES2015\n\n```javascript\nimport {MDCPersistentDrawer, MDCPersistentDrawerFoundation, util} from 'mdc-drawer';\n```\n\n##### CommonJS\n\n```javascript\nconst mdcDrawer = require('mdc-drawer');\nconst MDCPersistentDrawer = mdcDrawer.MDCPersistentDrawer;\nconst MDCPersistentDrawerFoundation = mdcDrawer.MDCPersistentDrawerFoundation;\nconst util = mdcDrawer.util;\n```\n\n##### AMD\n\n```javascript\nrequire(['path/to/mdc-drawer'], mdcDrawer => {\n  const MDCPersistentDrawer = mdcDrawer.MDCPersistentDrawer;\n  const MDCPersistentDrawerFoundation = mdcDrawer.MDCPersistentDrawerFoundation;\n  const util = mdcDrawer.util;\n});\n```\n\n##### Global\n\n```javascript\nconst MDCPersistentDrawer = mdc.drawer.MDCPersistentDrawer;\nconst MDCPersistentDrawerFoundation = mdc.drawer.MDCPersistentDrawerFoundation;\nconst util = mdc.drawer.util;\n```\n\n#### Automatic Instantiation\n\nIf you do not care about retaining the component instance for the persistent drawer, simply call `attachTo()`\nand pass it a DOM element.  \n\n```javascript\nmdc.drawer.MDCPersistentDrawer.attachTo(document.querySelector('.mdc-persistent-drawer'));\n```\n\n#### Manual Instantiation\n\nPersistent drawers can easily be initialized using their default constructors as well, similar to `attachTo`.\n\n```javascript\nimport {MDCPersistentDrawer} from 'mdc-drawer';\n\nconst drawer = new MDCPersistentDrawer(document.querySelector('.mdc-persistent-drawer'));\n```\n\n#### Handling events\n\nWhen the drawer is opened or closed, the component will emit a\n`MDCPersistentDrawer:open` or `MDCPersistentDrawer:close` custom event with no data attached.\nEvents get emitted only when the drawer toggles its opened state, i.e. multiple consecutive\n`drawer.open = true` calls will result in only one `MDCPersistentDrawer:open`.\n\n### Using the Foundation Class\n\nMDC Persistent Drawer ships with an `MDCPersistentDrawerFoundation` class that external frameworks and libraries can\nuse to integrate the component. As with all foundation classes, an adapter object must be provided.\nThe adapter for persistent drawers must provide the following functions, with correct signatures:\n\n| Method Signature | Description |\n| --- | --- |\n| `addClass(className: string) => void` | Adds a class to the root element. |\n| `removeClass(className: string) => void` | Removes a class from the root element. |\n| `hasClass(className: string) => boolean` | Returns boolean indicating whether element has a given class. |\n| `hasNecessaryDom() => boolean` | Returns boolean indicating whether the necessary DOM is present (namely, the `mdc-persistent-drawer__drawer` drawer container). |\n| `registerInteractionHandler(evt: string, handler: EventListener) => void` | Adds an event listener to the root element, for the specified event name. |\n| `deregisterInteractionHandler(evt: string, handler: EventListener) => void` | Removes an event listener from the root element, for the specified event name. |\n| `registerDrawerInteractionHandler(evt: string, handler: EventListener) => void` | Adds an event listener to the drawer container sub-element, for the specified event name. |\n| `deregisterDrawerInteractionHandler(evt: string, handler: EventListener) => void` | Removes an event listener from drawer container sub-element, for the specified event name. |\n| `registerTransitionEndHandler(handler: EventListener) => void` | Registers an event handler to be called when a `transitionend` event is triggered on the drawer container sub-element element. |\n| `deregisterTransitionEndHandler(handler: EventListener) => void` | Deregisters an event handler from a `transitionend` event listener. This will only be called with handlers that have previously been passed to `registerTransitionEndHandler` calls. |\n| `registerDocumentKeydownHandler(handler: EventListener) => void` | Registers an event handler on the `document` object for a `keydown` event. |\n| `deregisterDocumentKeydownHandler(handler: EventListener) => void` | Deregisters an event handler on the `document` object for a `keydown` event. |\n| `getDrawerWidth() => number` | Returns the current drawer width, in pixels. |\n| `setTranslateX(value: number) => void` | Sets the current position for the drawer, in pixels from the border. |\n| `getFocusableElements() => NodeList` | Returns the node list of focusable elements inside the drawer. |\n| `saveElementTabState(el: Element) => void` | Saves the current tab index for the element in a data property. |\n| `restoreElementTabState(el: Element) => void` | Restores the saved tab index (if any) for an element. |\n| `makeElementUntabbable(el: Element) => void` | Makes an element untabbable. |\n| `notifyOpen() => void` | Dispatches an event notifying listeners that the drawer has been opened. |\n| `notifyClose() => void` | Dispatches an event notifying listeners that the drawer has been closed. |\n| `isRtl() => boolean` | Returns boolean indicating whether the current environment is RTL. |\n| `isDrawer(el: Element) => boolean` | Returns boolean indicating whether the provided element is the drawer container sub-element. |\n\n## Temporary drawer usage\n\nA temporary drawer is usually closed, sliding out at a higher elevation than the content when opened. It is appropriate\nfor any display size.\n\n```html\n<aside class=\"mdc-temporary-drawer mdc-typography\">\n  <nav class=\"mdc-temporary-drawer__drawer\">\n    <header class=\"mdc-temporary-drawer__header\">\n      <div class=\"mdc-temporary-drawer__header-content\">\n        Header here\n      </div>\n    </header>\n    <nav id=\"icon-with-text-demo\" class=\"mdc-temporary-drawer__content mdc-list\">\n      <a class=\"mdc-list-item mdc-temporary-drawer--selected\" href=\"#\">\n        <i class=\"material-icons mdc-list-item__start-detail\" aria-hidden=\"true\">inbox</i>Inbox\n      </a>\n      <a class=\"mdc-list-item\" href=\"#\">\n        <i class=\"material-icons mdc-list-item__start-detail\" aria-hidden=\"true\">star</i>Star\n      </a>\n    </nav>\n  </nav>\n</aside>\n```\n\n```js\nlet drawer = new mdc.drawer.MDCTemporaryDrawer(document.querySelector('.mdc-temporary-drawer'));\ndocument.querySelector('.menu').addEventListener('click', () => drawer.open = true);\n```\n\n### Headers and toolbar spacers\n\nTemporary drawers can use toolbar spacers, headers, or neither.\n\nA toolbar spacer adds to the drawer the same amount of space that the toolbar takes up in your application. This is\nvery useful for visual alignment and consistency. Note that you can place content inside the toolbar spacer.\n\n```html\n<aside class=\"mdc-temporary-drawer mdc-typography\">\n  <nav class=\"mdc-temporary-drawer__drawer\">\n\n    <div class=\"mdc-temporary-drawer__toolbar-spacer\"></div>\n\n    <nav id=\"icon-with-text-demo\" class=\"mdc-temporary-drawer__content mdc-list\">\n      <a class=\"mdc-list-item mdc-temporary-drawer--selected\" href=\"#\">\n        <i class=\"material-icons mdc-list-item__start-detail\" aria-hidden=\"true\">inbox</i>Inbox\n      </a>\n      <a class=\"mdc-list-item\" href=\"#\">\n        <i class=\"material-icons mdc-list-item__start-detail\" aria-hidden=\"true\">star</i>Star\n      </a>\n    </nav>\n  </nav>\n</aside>\n```\n\nA header, on the other hand, is a large rectangular area that maintains a 16:9 ratio. It's often used for user account\nselection.\nIt uses an outer `mdc-temporary-drawer__header` for positioning, with an inner `mdc-temporary-drawer__header-content`\nfor placing the actual content, which will be bottom-aligned.\n\n```html\n<aside class=\"mdc-temporary-drawer mdc-typography\">\n  <nav class=\"mdc-temporary-drawer__drawer\">\n\n    <header class=\"mdc-temporary-drawer__header\">\n      <div class=\"mdc-temporary-drawer__header-content\">\n        Header content goes here\n      </div>\n    </header>\n\n    <nav id=\"icon-with-text-demo\" class=\"mdc-temporary-drawer__content mdc-list\">\n      <a class=\"mdc-list-item mdc-temporary-drawer--selected\" href=\"#\">\n        <i class=\"material-icons mdc-list-item__start-detail\" aria-hidden=\"true\">inbox</i>Inbox\n      </a>\n      <a class=\"mdc-list-item\" href=\"#\">\n        <i class=\"material-icons mdc-list-item__start-detail\" aria-hidden=\"true\">star</i>Star\n      </a>\n    </nav>\n  </nav>\n</aside>\n```\n\nCSS classes:\n\n| Class                                  | Description                                                                |\n| -------------------------------------- | -------------------------------------------------------------------------- |\n| `mdc-temporary-drawer`                 | Mandatory. Needs to be set on the root element of the component.           |\n| `mdc-temporary-drawer__drawer`         | Mandatory. Needs to be set on the container node for the drawer content.   |\n| `mdc-temporary-drawer__content`        | Optional. Should be set on the list of items inside the drawer.            |\n| `mdc-temporary-drawer__toolbar-spacer` | Optional. Add to node to provide the matching amount of space for toolbar. |\n| `mdc-temporary-drawer__header`         | Optional. Add to container node to create a 16:9 drawer header.            |\n| `mdc-temporary-drawer__header-content` | Optional. Add to content node inside `mdc-temporary-drawer__header`.       |\n\n### Using the JS Component\n\nMDC Temporary Drawer ships with a Component / Foundation combo which allows for frameworks to richly integrate the\ncorrect drawer behaviors into idiomatic components.\n\n#### Including in code\n\n##### ES2015\n\n```javascript\nimport {MDCTemporaryDrawer, MDCTemporaryDrawerFoundation, util} from 'mdc-drawer';\n```\n\n##### CommonJS\n\n```javascript\nconst mdcDrawer = require('mdc-drawer');\nconst MDCTemporaryDrawer = mdcDrawer.MDCTemporaryDrawer;\nconst MDCTemporaryDrawerFoundation = mdcDrawer.MDCTemporaryDrawerFoundation;\nconst util = mdcDrawer.util;\n```\n\n##### AMD\n\n```javascript\nrequire(['path/to/mdc-drawer'], mdcDrawer => {\n  const MDCTemporaryDrawer = mdcDrawer.MDCTemporaryDrawer;\n  const MDCTemporaryDrawerFoundation = mdcDrawer.MDCTemporaryDrawerFoundation;\n  const util = mdcDrawer.util;\n});\n```\n\n##### Global\n\n```javascript\nconst MDCTemporaryDrawer = mdc.drawer.MDCTemporaryDrawer;\nconst MDCTemporaryDrawerFoundation = mdc.drawer.MDCTemporaryDrawerFoundation;\nconst util = mdc.drawer.util;\n```\n\n#### Automatic Instantiation\n\nIf you do not care about retaining the component instance for the temporary drawer, simply call `attachTo()`\nand pass it a DOM element.  \n\n```javascript\nmdc.drawer.MDCTemporaryDrawer.attachTo(document.querySelector('.mdc-temporary-drawer'));\n```\n\n#### Manual Instantiation\n\nTemporary drawers can easily be initialized using their default constructors as well, similar to `attachTo`.\n\n```javascript\nimport {MDCTemporaryDrawer} from 'mdc-drawer';\n\nconst drawer = new MDCTemporaryDrawer(document.querySelector('.mdc-temporary-drawer'));\n```\n\n#### Handling events\n\nWhen the drawer is opened or closed, the component will emit a\n`MDCTemporaryDrawer:open` or `MDCTemporaryDrawer:close` custom event with no data attached.\nEvents get emitted only when the drawer toggles its opened state, i.e. multiple consecutive\n`drawer.open = true` calls will result in only one `MDCTemporaryDrawer:open`.\n\n### Using the Foundation Class\n\nMDC Temporary Drawer ships with an `MDCTemporaryDrawerFoundation` class that external frameworks and libraries can\nuse to integrate the component. As with all foundation classes, an adapter object must be provided.\nThe adapter for temporary drawers must provide the following functions, with correct signatures:\n\n| Method Signature | Description |\n| --- | --- |\n| `addClass(className: string) => void` | Adds a class to the root element. |\n| `removeClass(className: string) => void` | Removes a class from the root element. |\n| `hasClass(className: string) => boolean` | Returns boolean indicating whether element has a given class. |\n| `hasNecessaryDom() => boolean` | Returns boolean indicating whether the necessary DOM is present (namely, the `mdc-temporary-drawer__drawer` drawer container). |\n| `registerInteractionHandler(evt: string, handler: EventListener) => void` | Adds an event listener to the root element, for the specified event name. |\n| `deregisterInteractionHandler(evt: string, handler: EventListener) => void` | Removes an event listener from the root element, for the specified event name. |\n| `registerDrawerInteractionHandler(evt: string, handler: EventListener) => void` | Adds an event listener to the drawer container sub-element, for the specified event name. |\n| `deregisterDrawerInteractionHandler(evt: string, handler: EventListener) => void` | Removes an event listener from drawer container sub-element, for the specified event name. |\n| `registerTransitionEndHandler(handler: EventListener) => void` | Registers an event handler to be called when a `transitionend` event is triggered on the drawer container sub-element element. |\n| `deregisterTransitionEndHandler(handler: EventListener) => void` | Deregisters an event handler from a `transitionend` event listener. This will only be called with handlers that have previously been passed to `registerTransitionEndHandler` calls. |\n| `registerDocumentKeydownHandler(handler: EventListener) => void` | Registers an event handler on the `document` object for a `keydown` event. |\n| `deregisterDocumentKeydownHandler(handler: EventListener) => void` | Deregisters an event handler on the `document` object for a `keydown` event. |\n| `getDrawerWidth() => number` | Returns the current drawer width, in pixels. |\n| `setTranslateX(value: number) => void` | Sets the current position for the drawer, in pixels from the border. |\n| `updateCssVariable(value: string) => void` | Sets a CSS custom property, for controlling the current background opacity when manually dragging the drawer. |\n| `getFocusableElements() => NodeList` | Returns the node list of focusable elements inside the drawer. |\n| `saveElementTabState(el: Element) => void` | Saves the current tab index for the element in a data property. |\n| `restoreElementTabState(el: Element) => void` | Restores the saved tab index (if any) for an element. |\n| `makeElementUntabbable(el: Element) => void` | Makes an element untabbable. |\n| `notifyOpen() => void` | Dispatches an event notifying listeners that the drawer has been opened. |\n| `notifyClose() => void` | Dispatches an event notifying listeners that the drawer has been closed. |\n| `isRtl() => boolean` | Returns boolean indicating whether the current environment is RTL. |\n| `isDrawer(el: Element) => boolean` | Returns boolean indicating whether the provided element is the drawer container sub-element. |\n\n### The util API\nExternal frameworks and libraries can use the following utility methods when integrating a component.\n\n#### util.remapEvent(eventName, globalObj = window) => String\n\nRemap touch events to pointer events, if the browser doesn't support touch events.\n\n#### util.getTransformPropertyName(globalObj = window, forceRefresh = false) => String\n\nChoose the correct transform property to use on the current browser.\n\n#### util.supportsCssCustomProperties(globalObj = window) => Boolean\n\nDetermine whether the current browser supports CSS properties.\n\n#### util.applyPassive(globalObj = window, forceRefresh = false) => object\n\nDetermine whether the current browser supports passive event listeners, and if so, use them.\n\n#### util.saveElementTabState(el) => void\n\nSave the tab state for an element.\n\n#### util.restoreElementTabState(el) => void\n\nRestore the tab state for an element, if it was saved.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/material-components/material-components-web.git"
  },
  "scripts": {},
  "version": "0.4.0"
}
