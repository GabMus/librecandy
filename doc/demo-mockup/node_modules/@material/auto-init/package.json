{
  "_args": [
    [
      {
        "raw": "@material/auto-init@^0.1.0",
        "scope": "@material",
        "escapedName": "@material%2fauto-init",
        "name": "@material/auto-init",
        "rawSpec": "^0.1.0",
        "spec": ">=0.1.0 <0.2.0",
        "type": "range"
      },
      "/home/federico/git/librecandy/doc/demo-mockup/node_modules/material-components-web"
    ]
  ],
  "_from": "@material/auto-init@>=0.1.0 <0.2.0",
  "_id": "@material/auto-init@0.1.1",
  "_inCache": true,
  "_location": "/@material/auto-init",
  "_nodeVersion": "7.1.0",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/auto-init-0.1.1.tgz_1481824175158_0.7523449703585356"
  },
  "_npmUser": {
    "name": "material",
    "email": "traviskaufman+npm@google.com"
  },
  "_npmVersion": "3.10.9",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@material/auto-init@^0.1.0",
    "scope": "@material",
    "escapedName": "@material%2fauto-init",
    "name": "@material/auto-init",
    "rawSpec": "^0.1.0",
    "spec": ">=0.1.0 <0.2.0",
    "type": "range"
  },
  "_requiredBy": [
    "/material-components-web"
  ],
  "_resolved": "https://registry.npmjs.org/@material/auto-init/-/auto-init-0.1.1.tgz",
  "_shasum": "16a5c37061be71bdcb7b5abc30f6e9785d58c777",
  "_shrinkwrap": null,
  "_spec": "@material/auto-init@^0.1.0",
  "_where": "/home/federico/git/librecandy/doc/demo-mockup/node_modules/material-components-web",
  "bugs": {
    "url": "https://github.com/material-components/material-components-web/issues"
  },
  "dependencies": {},
  "description": "Declarative, easy-to-use auto-initialization for Material Components for the web",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "16a5c37061be71bdcb7b5abc30f6e9785d58c777",
    "tarball": "https://registry.npmjs.org/@material/auto-init/-/auto-init-0.1.1.tgz"
  },
  "homepage": "https://github.com/material-components/material-components-web#readme",
  "license": "Apache-2.0",
  "main": "index.js",
  "maintainers": [
    {
      "name": "material",
      "email": "traviskaufman+npm@google.com"
    }
  ],
  "name": "@material/auto-init",
  "optionalDependencies": {},
  "readme": "# MDC-Web Auto Init\n\n`mdc-auto-init` is a utility package that provides declarative, DOM-based method of initialization\nfor MDC-Web components on simple web sites. Note that for more advanced use-cases and complex sites,\nmanual instantiation of components will give you more flexibility. However, `mdc-auto-init` is great\nfor static websites, prototypes, and other use-cases where simplicity and convenience is most\nappropriate.\n\n## Installation\n\n```\nnpm install --save @material/auto-init\n```\n\n## Usage\n\n### Using as part of `material-components-web`\n\nIf you are using mdc-auto-init as part of the [material-components-web](../material-components-web)\npackage, simply write the necessary DOM needed for a component, and attach a `data-mdc-auto-init`\nattribute to the root element with its value set to the Component's class name. Then, after\nwriting the markup, simply insert a script tag that calls `mdc.autoInit()`.\n\n```html\n<div class=\"mdc-textfield\" data-mdc-auto-init=\"MDCTextfield\">\n  <input class=\"mdc-textfield__input\" type=\"text\" id=\"input\">\n  <label for=\"input\" class=\"mdc-textfield__label\">Input Label</label>\n</div>\n\n<!-- at the bottom of the page -->\n<script type=\"text/javascript\">\n  window.mdc.autoInit();\n</script>\n```\n\nThis will attach an [MDCTextfield](../mdc-textfield) instance to the root `<div>` element.\n\n#### Accessing the component instance\n\nWhen `mdc-auto-init` attaches a component to an element, it assign that instance to the element\nusing a property whose name is the value of `data-mdc-auto-init`. For example, given\n\n```html\n<div class=\"mdc-textfield\" data-mdc-auto-init=\"MDCTextfield\">\n  <input class=\"mdc-textfield__input\" type=\"text\" id=\"input\">\n  <label for=\"input\" class=\"mdc-textfield__label\">Input Label</label>\n</div>\n```\n\nOnce `mdc.autoInit()` is called, you can access the component instance via an `MDCTextfield`\nproperty on that element.\n\n```js\ndocument.querySelector('.mdc-textfield').MDCTextfield.disabled = true;\n```\n\n### Using as a standalone module\n\n#### Registering Components\n\nIf you are using `mdc-auto-init` outside of `material-components-web`, you must manually provide a\nmapping between `data-mdc-auto-init` attribute values and the components which they map to. This can\nbe achieved via `mdcAutoInit.register`.\n\n```js\nimport mdcAutoInit from 'mdc-auto-init';\nimport {MDCTextfield} from 'mdc-textfield';\n\nmdcAutoInit.register('MDCTextfield', MDCTextfield);\n```\n\n`mdcAutoInit.register()` tells `mdc-auto-init` that when it comes across an element with a\n`data-mdc-auto-init` attribute set to `\"MDCTextfield\"`, it should initialize an `MDCTextfield`\ninstance on that element. The `material-components-web` package does this for all components for\nconvenience.\n\nAlso note that a component can be mapped to any string, not necessarily the name of its constructor.\n\n```js\nimport mdcAutoInit from 'mdc-auto-init';\nimport {MDCTextfield} from 'mdc-textfield';\n\nmdcAutoInit.register('My amazing text field!!!', MDCTextfield);\n```\n\n```html\n<div class=\"mdc-textfield\" data-mdc-auto-init=\"My amazing text field!!!\">\n  <!-- ... -->\n</div>\n<script>window.mdc.autoInit();</script>\n```\n\n### De-registering components\n\nAny component can be deregistered by calling `mdcAutoInit.deregister` with the name used to register\nthe component.\n\n```js\nmdcAutoInit.deregister('MDCTextfield');\n```\n\nThis will simply remove the name -> component mapping. It will _not_ affect any already-instantiated\ncomponents on the page.\n\nTo unregister all name -> component mappings, you can use `mdcAutoInit.deregisterAll()`.\n\n## How `mdc-auto-init` works\n\n`mdc-auto-init` maintains a registry object which maps string identifiers, or **names**, to\ncomponent constructors. When the default exported function - `mdcAutoInit()` - is called,\n`mdc-auto-init` queries the DOM for all elements with a `data-mdc-auto-init` attribute. For each\nelement returned, the following steps are taken:\n\n1. If the `data-mdc-auto-init` attribute does not have a value associated with it, throw an error\n2. If the value of `data-mdc-auto-init` cannot be found in the registry, throw an error\n3. If the element has an existing property whose name is the value of `data-mdc-auto-init`, it is\n   assumed to have already been initialized. Therefore it is skipped, and a warning will be logged\n   to the console (this behavior can be overridden).\n4. Let `Ctor` be the component constructor associated with the given name in the register\n5. Let `instance` be the result of calling `Ctor.attachTo()` and passing in the element as an\n   argument.\n6. Create a non-writable, non-enumerable property on the node whose name is the value of\n   `data-mdc-auto-init` and whose value is `instance`.\n\n### Initializing only a certain part of the page\n\nBy default, `mdc-auto-init` will query the entire document to figure out which components to\ninitialize. To override this behavior, you can pass in an optional `root` first argument specifying\nthe root node whose children will be queried for instantiation.\n\n```html\n<div id=\"mdc-section\">\n  <!-- MDC-Web Components, etc. -->\n</div>\n<script>window.mdc.autoInit(document.getElementById('mdc-section'));</script>\n```\n\nIn the above example, only elements within `<div id=\"mdc-section\">` will be queried.\n\n### Calling autoInit() multiple times\n\nBy default, `mdc-auto-init` only expects to be called once, at page-load time. However, there may be\ncertain scenarios where one may want to use `mdc-auto-init` and may still need to call it multiple\ntimes, such as on a Wordpress site that contains an infinitely-scrolling list of new blog post\nelements containing MDC-Web components. `mdcAutoInit()` takes an optional second argument which is the\nfunction used to warn users when a component is initialized multiple times. By default, this is just\n`console.warn()`. However, to skip over already-initialized components without logging a\nwarning, you could simply pass in a nop.\n\n```js\n<script>window.mdc.autoInit(/* root */ document, () => {});</script>\n```\n\nThis will suppress any warnings about already initialized elements.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/material-components/material-components-web.git"
  },
  "scripts": {},
  "version": "0.1.1"
}
