{
  "_args": [
    [
      {
        "raw": "focus-trap@^2.3.0",
        "scope": null,
        "escapedName": "focus-trap",
        "name": "focus-trap",
        "rawSpec": "^2.3.0",
        "spec": ">=2.3.0 <3.0.0",
        "type": "range"
      },
      "/home/federico/git/librecandy/doc/demo-mockup/node_modules/@material/dialog"
    ]
  ],
  "_from": "focus-trap@>=2.3.0 <3.0.0",
  "_id": "focus-trap@2.3.0",
  "_inCache": true,
  "_location": "/focus-trap",
  "_nodeVersion": "4.7.2",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/focus-trap-2.3.0.tgz_1484596387941_0.22666444536298513"
  },
  "_npmUser": {
    "name": "davidtheclark",
    "email": "david.dave.clark@gmail.com"
  },
  "_npmVersion": "4.1.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "focus-trap@^2.3.0",
    "scope": null,
    "escapedName": "focus-trap",
    "name": "focus-trap",
    "rawSpec": "^2.3.0",
    "spec": ">=2.3.0 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/@material/dialog"
  ],
  "_resolved": "https://registry.npmjs.org/focus-trap/-/focus-trap-2.3.0.tgz",
  "_shasum": "07c91964867d346315f4f5f8df88bf96455316e2",
  "_shrinkwrap": null,
  "_spec": "focus-trap@^2.3.0",
  "_where": "/home/federico/git/librecandy/doc/demo-mockup/node_modules/@material/dialog",
  "author": {
    "name": "David Clark"
  },
  "bugs": {
    "url": "https://github.com/davidtheclark/focus-trap/issues"
  },
  "dependencies": {
    "tabbable": "^1.0.3"
  },
  "description": "Trap focus within a DOM node.",
  "devDependencies": {
    "browserify": "^13.3.0",
    "budo": "^9.4.1",
    "eslint": "^3.13.1"
  },
  "directories": {},
  "dist": {
    "shasum": "07c91964867d346315f4f5f8df88bf96455316e2",
    "tarball": "https://registry.npmjs.org/focus-trap/-/focus-trap-2.3.0.tgz"
  },
  "files": [
    "index.js"
  ],
  "gitHead": "df7dd300f6f1458ec11f0d0e1359bafefc38d373",
  "homepage": "https://github.com/davidtheclark/focus-trap#readme",
  "keywords": [
    "focus",
    "accessibility",
    "trap",
    "capture",
    "keyboard",
    "modal"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "davidtheclark",
      "email": "david.dave.clark@gmail.com"
    }
  ],
  "name": "focus-trap",
  "optionalDependencies": {},
  "readme": "# focus-trap\n\nTrap focus within a DOM node.\n\nThere may come a time when you find it important to trap focus within a DOM node â€” so that when a user hits `Tab` or `Shift+Tab` or clicks around, she can't escape a certain cycle of focusable elements.\n\nYou will definitely face this challenge when you are try to build **accessible modals or dropdown menus**.\n\nThis module is a little **vanilla JS** solution to that problem.\n\nIf you are using React, check out [focus-trap-react](https://github.com/davidtheclark/focus-trap-react), a light wrapper around this library. If you are not a React user, consider creating light wrappers in your framework-of-choice!\n\n## What it does\n\n[Check out the demos.](http://davidtheclark.github.io/focus-trap/demo/)\n\nWhen a focus trap is activated, this is what should happen:\n\n- Some element within the focus trap receives focus. By default, this will be the first element in the focus trap's tab order (as determined by [tabbable](https://github.com/davidtheclark/tabbable)). Alternately, you can specify an element that should receive this initial focus.\n- The `Tab` and `Shift+Tab` keys will cycle through the focus trap's tabbable elements *but will not leave the focus trap*.\n- Clicks within the focus trap behave normally; but clicks *outside* the focus trap are blocked.\n- The `Escape` key will deactivate the focus trap.\n\nWhen the focus trap is deactivated, this is what should happen:\n\n- Focus is passed to *whichever element had focus when the trap was activated* (e.g. the button that opened the modal or menu).\n- Tabbing and clicking behave normally everywhere.\n\nFor more advanced usage (e.g. focus traps within focus traps), you can also pause a focus trap's behavior without deactivating it entirely, then unpause at will.\n\n## Installation\n\n```\nnpm install focus-trap\n```\n\n## Browser Support\n\nIE9+\n\nWhy?\nBecause this module uses [`EventTarget.addEventListener()`](document.createElement('button')).\nAnd its only dependency, tabbable, uses [a couple of IE9+ functions](https://github.com/davidtheclark/tabbable#browser-support).\n\n## Usage\n\n### focusTrap = createFocusTrap(element[, createOptions]);\n\nReturns a new focus trap on `element`.\n\n`element` can be\n- a DOM node (the focus trap itself) or\n- a selector string (which will be pass to `document.querySelector()` to find the DOM node).\n\n`createOptions`:\n\n- **onActivate** {function}: A function that will be called when the focus trap activates.\n- **onDeactivate** {function}: A function that will be called when the focus trap deactivates,\n- **initialFocus** {element|string|function}: By default, when a focus trap is activated the first element in the focus trap's tab order will receive focus. With this option you can specify a different element to receive that initial focus. Can be a DOM node, or a selector string (which will be passed to `document.querySelector()` to find the DOM node), or a function that returns a DOM node.\n- **fallbackFocus** {element|string|function}: By default, an error will be thrown if the focus trap contains no elements in its tab order. With this option you can specify a fallback element to programmatically receive focus if no other tabbable elements are found. For example, you may want a popover's `<div>` to receive focus if the popover's content includes no tabbable elements. *Make sure the fallback element has a negative `tabindex` so it can be programmatically focused.* The option value can be a DOM node, a selector string (which will be passed to `document.querySelector()` to find the DOM node), or  a function that returns a DOM node.\n- **escapeDeactivates** {boolean}: Default: `true`. If `false`, the `Escape` key will not trigger deactivation of the focus trap. This can be useful if you want to force the user to make a decision instead of allowing an easy way out.\n- **clickOutsideDeactivates** {boolean}: Default: `false`. If `true`, a click outside the focus trap will deactivate the focus trap and allow the click event to do its thing.\n- **returnFocusOnDeactivate** {boolean}: Default: `true`. If `false`, when the trap is deactivated, focus will *not* return to the element that had focus before activation.\n\n### focusTrap.activate()\n\nActivates the focus trap, adding various event listeners to the document.\n\nIf focus is already within it the trap, it remains unaffected. Otherwise, focus-trap will try to focus the following nodes, in order:\n\n- `createOptions.initialFocus`\n- The first tabbable node in the trap\n- `createOptions.fallbackFocus`\n\nIf none of the above exist, an error will be thrown. You cannot have a focus trap that lacks focus.\n\nReturns the `focusTrap`.\n\n### focusTrap.deactivate([deactivateOptions])\n\nDeactivates the focus trap.\n\nReturns the `focusTrap`.\n\n`deactivateOptions`:\n\nThese options are used to override the focus trap's default behavior for this particular deactivation.\n\n- **returnFocus** {boolean}: Default: whatever you chose for `createOptions.returnFocusOnDeactivate`.\n- **onDeactivate** {function | null | false}: Default: whatever you chose for `createOptions.onDeactivate`. `null` or `false` are the equivalent of a `noop`.\n\n### focusTrap.pause()\n\nPause an active focus trap's event listening without deactivating the trap.\n\nIf the focus trap has not been activated, nothing happens.\n\nReturns the `focusTrap`.\n\nAny `onDeactivate` callback will not be called, and focus will not return to the element that was focused before the trap's activation. But the trap's behavior will be paused.\n\nThis is useful in various cases, one of which is when you want one focus trap within another. `demo-six` exemplifies how you can implement this.\n\n### focusTrap.unpause()\n\nUnpause an active focus trap. (See `pause()`, above.)\n\nFocus is forced into the trap just as described for `focusTrap.activate()`.\n\nIf the focus trap has not been activated or has not been paused, nothing happens.\n\nReturns the `focusTrap`.\n\n## Examples\n\nRead code in `demo/` (it's very simple), and [see how it works](http://davidtheclark.github.io/focus-trap/demo/).\n\nHere's what happens in `demo-one.js`:\n\n```js\nvar createFocusTrap = require('../../');\n\nvar containerOne = document.getElementById('demo-one');\nvar focusTrapOne = createFocusTrap('#demo-one', {\n  onDeactivate: function () {\n    containerOne.className = 'trap';\n  },\n});\n\ndocument.getElementById('activate-one').addEventListener('click', function () {\n  focusTrapOne.activate();\n  containerOne.className = 'trap is-active';\n});\n\ndocument.getElementById('deactivate-one').addEventListener('click', function () {\n  focusTrapOne.deactivate();\n});\n```\n\n## Other details\n\n- *Only one focus trap can be listening at a time.* So if you want two focus traps active at a time, one of them has to be paused.\n\n## Development\n\nBecause of the nature of the functionality, involving keyboard and click and (especially) focus events, JavaScript unit tests didn't make sense. (If you disagree and can help out, please PR!) So the demo is also the test: run it in browsers and see how it works, checking the documented requirements.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/davidtheclark/focus-trap.git"
  },
  "scripts": {
    "demo-bundle": "browserify demo/js/index.js -o demo/demo-bundle.js",
    "lint": "eslint .",
    "start": "budo demo/js/index.js:demo-bundle.js --dir demo --live",
    "test": "npm run lint"
  },
  "version": "2.3.0"
}
