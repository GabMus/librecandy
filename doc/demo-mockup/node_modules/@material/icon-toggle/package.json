{
  "_args": [
    [
      {
        "raw": "@material/icon-toggle@^0.1.9",
        "scope": "@material",
        "escapedName": "@material%2ficon-toggle",
        "name": "@material/icon-toggle",
        "rawSpec": "^0.1.9",
        "spec": ">=0.1.9 <0.2.0",
        "type": "range"
      },
      "/home/federico/git/librecandy/doc/demo-mockup/node_modules/material-components-web"
    ]
  ],
  "_from": "@material/icon-toggle@>=0.1.9 <0.2.0",
  "_id": "@material/icon-toggle@0.1.9",
  "_inCache": true,
  "_location": "/@material/icon-toggle",
  "_nodeVersion": "6.9.2",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/icon-toggle-0.1.9.tgz_1493653388534_0.3735851140227169"
  },
  "_npmUser": {
    "name": "amsheehan",
    "email": "alex.m.sheehan@gmail.com"
  },
  "_npmVersion": "3.10.9",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@material/icon-toggle@^0.1.9",
    "scope": "@material",
    "escapedName": "@material%2ficon-toggle",
    "name": "@material/icon-toggle",
    "rawSpec": "^0.1.9",
    "spec": ">=0.1.9 <0.2.0",
    "type": "range"
  },
  "_requiredBy": [
    "/material-components-web"
  ],
  "_resolved": "https://registry.npmjs.org/@material/icon-toggle/-/icon-toggle-0.1.9.tgz",
  "_shasum": "78cf3dc765cd3e810a59ede409cb524373dc65b9",
  "_shrinkwrap": null,
  "_spec": "@material/icon-toggle@^0.1.9",
  "_where": "/home/federico/git/librecandy/doc/demo-mockup/node_modules/material-components-web",
  "bugs": {
    "url": "https://github.com/material-components/material-components-web/issues"
  },
  "dependencies": {
    "@material/animation": "^0.2.0",
    "@material/base": "^0.1.2",
    "@material/ripple": "^0.6.0",
    "@material/theme": "^0.1.4"
  },
  "description": "The Material Components for the web icon toggle component",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "78cf3dc765cd3e810a59ede409cb524373dc65b9",
    "tarball": "https://registry.npmjs.org/@material/icon-toggle/-/icon-toggle-0.1.9.tgz"
  },
  "homepage": "https://github.com/material-components/material-components-web#readme",
  "keywords": [
    "material components",
    "material design",
    "icon toggle"
  ],
  "license": "Apache-2.0",
  "main": "index.js",
  "maintainers": [
    {
      "name": "amsheehan",
      "email": "alex.m.sheehan@gmail.com"
    },
    {
      "name": "bwobrien",
      "email": "obrien.test@gmail.com"
    },
    {
      "name": "cristobalchao",
      "email": "cchao87@gmail.com"
    },
    {
      "name": "ljepsen3541",
      "email": "ljepsen3541@gmail.com"
    },
    {
      "name": "material-admin",
      "email": "traviskaufman+npm@google.com"
    },
    {
      "name": "sgomes",
      "email": "mail@sgomes.io"
    },
    {
      "name": "traviskaufman",
      "email": "travis.kaufman@gmail.com"
    },
    {
      "name": "yeelan0319",
      "email": "yiranmao@gmail.com"
    }
  ],
  "name": "@material/icon-toggle",
  "optionalDependencies": {},
  "readme": "# MDC Icon Toggle\n\nMDC Icon Toggle provides a material design icon toggle button. It is fully accessible, and is\ndesigned to work with any icon set.\n\n## Installation\n\n```\nnpm install --save @material/icon-toggle\n```\n\n## Usage\n\nIn order to use MDC Icon Toggle, you will need to import an icon set, such as [Material Icons](https://design.google.com/icons/) or [Font Awesome](http://fontawesome.io/).\n\n```html\n<i class=\"mdc-icon-toggle material-icons\" role=\"button\" aria-pressed=\"false\"\n   aria-label=\"Add to favorites\" tabindex=\"0\"\n   data-toggle-on='{\"label\": \"Remove from favorites\", \"content\": \"favorite\"}'\n   data-toggle-off='{\"label\": \"Add to favorites\", \"content\": \"favorite_border\"}'>\n  favorite_border\n</i>\n```\n\nThen in JS\n\n```js\nimport {MDCIconToggle} from 'mdc-icon-toggle';\n\nMDCIconToggle.attachTo(document.querySelector('.mdc-icon-toggle'));\n```\n\nNote that you can access `MDCIconToggle` via CommonJS/AMD using the `default` property of the\n`require`d object, as well as globally via `mdc.IconToggle`.\n\nAlso note that you may omit the initial `aria-label` attribute and `favorite_border` content since\nthey will be added by the component. However, we recommend adding to prevent an initial flash of\nun-styled content.\n\n### Using with Font Awesome and similar libraries\n\nFont Awesome - as well as other popular icon font libraries - use pseudo-elements in order to\nprovide the icon, via the `content` property. However, MDC-Web uses pseudo-elements for ripple styles.\nIn order to get around this, you can nest the icon itself inside the icon toggle.\n\n```html\n<span class=\"mdc-icon-toggle\" role=\"button\" aria-pressed=\"false\"\n      aria-label=\"Star this item\" tabindex=\"0\"\n      data-icon-inner-selector=\".fa\"\n      data-toggle-on='{\"cssClass\": \"fa-star\", \"label\": \"Unstar this item\"}'\n      data-toggle-off='{\"cssClass\": \"fa-star-o\", \"label\": \"Star this item\"}'>\n  <i class=\"fa fa-star-o\" aria-hidden=\"true\"></i>\n</span>\n```\n\n`data-icon-inner-selector` tells MDCIconToggle to look for an element within itself that matches\nthat selector, and treat it as the element containing the icon. Also note the `aria-hidden`\nattribute on the icon. This is important to ensure that screen readers produce the correct output\nwhen reading this element.\n\n### Configuring the icon toggle states\n\nNote the use of `data-toggle-on` and `data-toggle-off` in the above examples. When an MDCIconToggle\ninstance is toggled, it looks at this data to determine how to update the element. This is what\nallows MDCIconToggle to be so flexible. The `data-toggle-on` configuration will be used when the is\nMDCIconToggle is toggled on, and vice versa for `data-toggle-off`. Both data attributes are encoded\nas JSON and can contain the following properties:\n\n| Property | Description |\n| --- | --- |\n| `label` | The value to apply to the element's \"aria-label\" attribute. |\n| `content` | The text content to set on the element. Note that if an inner icon is used, the text content will be set on that element instead. |\n| `cssClass` | A css class to apply to the icon element for the given toggle state. The same rules regarding inner icon elements described for `content` apply here as well. |\n\n### Disabled icon toggles\n\n```html\n<i class=\"material-icon mdc-icon-toggle mdc-icon-toggle--disabled\"\n   role=\"button\" tabindex=\"-1\" aria-pressed=\"false\" aria-disabled=\"true\"\n   data-toggle-on='{\"content\": \"favorite\"}' data-toggle-off='{\"content\": \"favorite_border\"}'></i>\n```\n\n### Theming\n\n`mdc-icon-toggle` ships with two css classes, `mdc-icon-toggle--primary` and\n`mdc-icon-toggle--accent` that allow you to color mdc-icon-toggle based on your primary and accent\ncolors, respectively.\n\n### Listening for change events\n\n`MDCIconToggle` emits an `MDCIconToggle:change` custom event when the value of the icon toggle\nchanges _as a result of user input_. This decision was made to align with how `change` events work\nfor normal inputs. In addition, these events do not bubble and cannot be cancelled.\n\nThe custom event's `detail` object contains a property `isOn` denoting whether or not the component\nis toggled on.\n\n```js\nconst iconEl = document.querySelector('.mdc-icon-toggle');\nconst status = document.getElementById('status');\niconEl.addEventListener('MDCIconToggle:change', ({detail}) => {\n  status.textContent = `Icon Toggle is ${detail.isOn ? 'on' : 'off'}`;\n});\n```\n\n### Refreshing the toggle data via the vanilla component.\n\nWhen the icon toggle is initialized, the `data-toggle-on` and `data-toggle-off` attributes are\ncached to prevent redundant JSON parsing whenever the element is interacted with. However, if you\nneed to, you can call `refreshToggleData()`:\n\n```js\niconToggle.refreshToggleData();\n```\n\nThis simply forwards a call to the foundation's `refreshToggleData()` method, causing the\n`data-toggle-*` attributes to be re-parsed and updated.\n\nThis method is useful for frameworks that incrementally render DOM. If an icon toggle's data\nattributes change, the component needs a way to update itself. This is the reason why this method is\nexposed on the foundation, and simply proxied by the vanilla component.\n\n### MDCIconToggle API\n\nSimilar to regular DOM elements, the `MDCIconToggle` functionality is exposed through accessor\nmethods.\n\n#### MDCIconToggle.on\n\nBoolean. Returns whether or not the icon toggle is currently toggled on. Setting this property\nwill update the toggle state.\n\n#### MDCIconToggle.disabled\n\nBoolean. Returns whether or not the icon toggle is currently disabled. Setting this property will\nupdate the disabled state.\n\n### Using the Foundation Class\n\nMDCIconToggle ships with an `MDCIconToggleFoundation` class that external frameworks and libraries\ncan use to build their own MDCIconToggle components with minimal effort. As with all foundation\nclasses, an adapter object must be provided. The adapter for icon toggles must provide the following\nfunctions, with correct signatures:\n\n| Method Signature | Description |\n| --- | --- |\n| `addClass(className: string) => void` | Adds a class to the root element, or the inner icon element. |\n| `removeClass(className: string) => void` | Removes a class from the root element, or the inner icon element. |\n| `registerInteractionHandler(type: string, handler: EventListener) => void` | Registers an event handler for an interaction event, such as `click` or `keydown`. |\n| `deregisterInteractionHandler(type: string, handler: EventListener) => void` | Removes an event handler for an interaction event, such as `click` or `keydown`. |\n| `setText(text: string) => void` | Sets the text content of the root element, or the inner icon element. |\n| `getTabIndex() => number` | Returns the tab index of the root element. |\n| `setTabIndex(tabIndex: number) => void` | Sets the tab index of the root element. |\n| `getAttr(name: string) => string` | Returns the value of the attribute `name` on the root element. Can also return `null`, similar to `getAttribute()`. |\n| `setAttr(name: string, value: string) => void` | Sets the attribute `name` to `value` on the root element. |\n| `rmAttr(name: string) => void` | Removes the attribute `name` on the root element. |\n| `notifyChange(evtData: {isOn: boolean}) => void` | Broadcasts a change notification, passing along the `evtData` to the environment's event handling system. In our vanilla implementation, Custom Events are used for this. |\n\n#### Adapter implementer considerations\n\nIf you are writing your own adapter, one thing that needs to be considered is the use of\n`data-icon-inner-selector`. This is handled by us at the _component_ level, which means our\nfoundation is completely unaware of it. To that end, if your framework's Icon Toggle support inner\nicon elements, you must ensure that `addClass`, `removeClass`, and `setText` apply to the correct\nicon element.\n\nAlso note that _ripples require their own foundation at the component level_. Check out our vanilla\nimplementation in `index.js` as a starting point.\n\n#### Full foundation API\n\n##### MDCIconToggleFoundation.refreshToggleData() => void\n\nAs described above, the `data-toggle-*` attributes are cached so as not to have to perform redundant\nparsing. If your framework performs incremental rendering, and these attributes change without\nre-rendering the component itself, you can call this method to re-parse the data attributes and keep\nthe foundation updated.\n\n##### MDCIconToggleFoundation.isOn() => boolean\n\nReturns true if the foundation's state is toggled on, false otherwise.\n\n##### MDCIconToggleFoundation.toggle(isOn: boolean = !this.isOn()) => void\n\nToggles the foundation's state, updating the component via the adapter methods. Defaults to the\ntoggling the opposite of the current state if no argument given. If an argument is given, will\ntoggle on if true, off if false.\n\n##### MDCIconToggleFoundation.isDisabled() => boolean\n\nReturns true if the foundation's state is disabled, false otherwise.\n\n##### MDCIconToggleFoundation.setDisabled(isDisabled: boolean) => void\n\nEnables / disables the foundation's state, updating the component via the adapter methods.\n\n##### MDCIconToggleFoundation.isKeyboardActivated() => boolean\n\nReturns true if the foundation is currently activated by a keyboard event, false otherwise.\nUseful for MDCRippleFoundation's `isSurfaceActive()` adapter method.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/material-components/material-components-web.git"
  },
  "scripts": {},
  "version": "0.1.9"
}
