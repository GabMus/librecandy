{
  "_args": [
    [
      {
        "raw": "@material/form-field@^0.2.4",
        "scope": "@material",
        "escapedName": "@material%2fform-field",
        "name": "@material/form-field",
        "rawSpec": "^0.2.4",
        "spec": ">=0.2.4 <0.3.0",
        "type": "range"
      },
      "/home/federico/git/librecandy/doc/demo-mockup/node_modules/material-components-web"
    ]
  ],
  "_from": "@material/form-field@>=0.2.4 <0.3.0",
  "_id": "@material/form-field@0.2.4",
  "_inCache": true,
  "_location": "/@material/form-field",
  "_nodeVersion": "6.9.2",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/form-field-0.2.4.tgz_1493653388460_0.34805405884981155"
  },
  "_npmUser": {
    "name": "amsheehan",
    "email": "alex.m.sheehan@gmail.com"
  },
  "_npmVersion": "3.10.9",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@material/form-field@^0.2.4",
    "scope": "@material",
    "escapedName": "@material%2fform-field",
    "name": "@material/form-field",
    "rawSpec": "^0.2.4",
    "spec": ">=0.2.4 <0.3.0",
    "type": "range"
  },
  "_requiredBy": [
    "/material-components-web"
  ],
  "_resolved": "https://registry.npmjs.org/@material/form-field/-/form-field-0.2.4.tgz",
  "_shasum": "7c53556e37924ceacaf3b432346412a8efa8828f",
  "_shrinkwrap": null,
  "_spec": "@material/form-field@^0.2.4",
  "_where": "/home/federico/git/librecandy/doc/demo-mockup/node_modules/material-components-web",
  "bugs": {
    "url": "https://github.com/material-components/material-components-web/issues"
  },
  "dependencies": {
    "@material/base": "^0.1.2",
    "@material/rtl": "^0.1.3",
    "@material/theme": "^0.1.4",
    "@material/typography": "^0.2.1"
  },
  "description": "Material Components for the web wrapper for laying out form fields and labels next to one another",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "7c53556e37924ceacaf3b432346412a8efa8828f",
    "tarball": "https://registry.npmjs.org/@material/form-field/-/form-field-0.2.4.tgz"
  },
  "homepage": "https://github.com/material-components/material-components-web#readme",
  "keywords": [
    "material components",
    "material design",
    "form"
  ],
  "license": "Apache-2.0",
  "main": "index.js",
  "maintainers": [
    {
      "name": "amsheehan",
      "email": "alex.m.sheehan@gmail.com"
    },
    {
      "name": "bwobrien",
      "email": "obrien.test@gmail.com"
    },
    {
      "name": "cristobalchao",
      "email": "cchao87@gmail.com"
    },
    {
      "name": "ljepsen3541",
      "email": "ljepsen3541@gmail.com"
    },
    {
      "name": "material-admin",
      "email": "traviskaufman+npm@google.com"
    },
    {
      "name": "sgomes",
      "email": "mail@sgomes.io"
    },
    {
      "name": "traviskaufman",
      "email": "travis.kaufman@gmail.com"
    },
    {
      "name": "yeelan0319",
      "email": "yiranmao@gmail.com"
    }
  ],
  "name": "@material/form-field",
  "optionalDependencies": {},
  "readme": "# MDC Form Field\n\nMDC Form Field provides an `mdc-form-field` helper class for easily making theme-aware, RTL-aware\nform field + label combos. It also provides an `MDCFormField` class for easily making input ripples\nrespond to label events.\n\n## Installation\n\n```\nnpm install --save @material/form-field\n```\n\n## CSS Usage\n\nThe `mdc-form-field` class can be used as a wrapper element with any `input` + `label` combo:\n\n```html\n<div class=\"mdc-form-field\">\n  <input type=\"checkbox\" id=\"input\">\n  <label for=\"input\">Input Label</label>\n</div>\n```\n\nBy default, this will position the label after the input. You can change this behavior using the\n`align-end` modifier class.\n\n```html\n<div class=\"mdc-form-field mdc-form-field--align-end\">\n  <input type=\"checkbox\" id=\"input\">\n  <label for=\"input\">Input Label</label>\n</div>\n```\n\nNow the label will be positioned before the checkbox.\n\n### Usage with MDC-Web Components\n\n`mdc-form-field` will work not just with `input` elements, but with _any_ element as long as its\nsuccessive sibling is a label element. This means it will work for any MDC-Web form control, such as a\ncheckbox:\n\n```html\n<div class=\"mdc-form-field\">\n  <div class=\"mdc-checkbox\">\n    <input type=\"checkbox\"\n           id=\"my-checkbox\"\n           class=\"mdc-checkbox__native-control\"/>\n    <div class=\"mdc-checkbox__background\">\n      <svg class=\"mdc-checkbox__checkmark\"\n           viewBox=\"0 0 24 24\">\n        <path class=\"mdc-checkbox__checkmark__path\"\n              fill=\"none\"\n              stroke=\"white\"\n              d=\"M1.73,12.91 8.1,19.28 22.79,4.59\"/>\n      </svg>\n      <div class=\"mdc-checkbox__mixedmark\"></div>\n    </div>\n  </div>\n  <label for=\"my-checkbox\" id=\"my-checkbox-label\">This is my checkbox</label>\n</div>\n```\n\n### RTL Support\n\n`mdc-form-field` is automatically RTL-aware, and will re-position elements within an RTL context.\n`mdc-form-field` will apply RTL styles whenever it, or its ancestors, has a `dir=\"rtl\"` attribute.\n\n### Theming\n\n`mdc-form-field` is dark theme aware, and will change the text color to the \"primary on dark\" text\ncolor when used within a dark theme.\n\n\n## JS Usage\n\n### Including in code\n\n#### ES2015\n\n```javascript\nimport {MDCFormField, MDCFormFieldFoundation} from 'mdc-form-field';\n```\n\n#### CommonJS\n\n```javascript\nconst mdcFormField = require('mdc-form-field');\nconst MDCFormField = mdcFormField.MDCFormField;\nconst MDCFormFieldFoundation = mdcFormField.MDCFormFieldFoundation;\n```\n\n#### AMD\n\n```javascript\nrequire(['path/to/mdc-form-field'], mdcFormField => {\n  const MDCFormField = mdcFormField.MDCFormField;\n  const MDCFormFieldFoundation = mdcFormField.MDCFormFieldFoundation;\n});\n```\n\n#### Global\n\n```javascript\nconst MDCFormField = mdc.radio.MDCFormField;\nconst MDCFormFieldFoundation = mdc.radio.MDCFormFieldFoundation;\n```\n\n### Instantiation\n\n```javascript\nimport {MDCFormField} from 'mdc-form-field';\n\nconst formField = new MDCFormField(document.querySelector('.mdc-form-field'));\n```\n\n### MDCFormField API\n\nThe `MDCFormField` functionality is exposed through a single accessor method.\n\n#### MDCFormField.input\n\nRead-write property that works with an instance of an MDC-Web input element.\n\nIn order for the label ripple integration to work correctly, this property needs to be set to a\nvalid instance of an MDC-Web input element which exposes a `ripple` getter.\n\n```javascript\nconst formField = new MDCFormField(document.querySelector('.mdc-form-field'));\nconst radio = new MDCRadio(document.querySelector('.mdc-radio'));\n\nformField.input = radio;\n```\n\nNo action is taken if the `input` property is not set or the input instance doesn't expose a\n`ripple` getter.\n\n\n### Adapter\n\nThe adapter for `MDCFormField` is extremely simple, providing only methods for adding and\nremoving event listeners from the label, as well as methods for activating and deactivating\nthe input ripple.\n\n| Method Signature | Description |\n| --- | --- |\n| `registerInteractionHandler(type: string, handler: EventListener) => void` | Adds an event listener `handler` for event type `type` to the label. |\n| `deregisterInteractionHandler(type: string, handler: EventListener) => void` | Removes an event listener `handler` for event type `type` to the label. |\n| `activateInputRipple() => void` | Activates the ripple on the input element. Should call `activate` on the input element's `ripple` property. |\n| `deactivateInputRipple() => void` | Deactivates the ripple on the input element. Should call `deactivate` on the input element's `ripple` property. |\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/material-components/material-components-web.git"
  },
  "scripts": {},
  "version": "0.2.4"
}
