{
  "_args": [
    [
      {
        "raw": "@material/textfield@^0.2.7",
        "scope": "@material",
        "escapedName": "@material%2ftextfield",
        "name": "@material/textfield",
        "rawSpec": "^0.2.7",
        "spec": ">=0.2.7 <0.3.0",
        "type": "range"
      },
      "/home/federico/git/librecandy/doc/demo-mockup/node_modules/material-components-web"
    ]
  ],
  "_from": "@material/textfield@>=0.2.7 <0.3.0",
  "_id": "@material/textfield@0.2.7",
  "_inCache": true,
  "_location": "/@material/textfield",
  "_nodeVersion": "6.9.2",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/textfield-0.2.7.tgz_1493653396305_0.8960901752579957"
  },
  "_npmUser": {
    "name": "amsheehan",
    "email": "alex.m.sheehan@gmail.com"
  },
  "_npmVersion": "3.10.9",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@material/textfield@^0.2.7",
    "scope": "@material",
    "escapedName": "@material%2ftextfield",
    "name": "@material/textfield",
    "rawSpec": "^0.2.7",
    "spec": ">=0.2.7 <0.3.0",
    "type": "range"
  },
  "_requiredBy": [
    "/material-components-web"
  ],
  "_resolved": "https://registry.npmjs.org/@material/textfield/-/textfield-0.2.7.tgz",
  "_shasum": "8aeddf74e5bbce38635399e3e3355a8c40725871",
  "_shrinkwrap": null,
  "_spec": "@material/textfield@^0.2.7",
  "_where": "/home/federico/git/librecandy/doc/demo-mockup/node_modules/material-components-web",
  "bugs": {
    "url": "https://github.com/material-components/material-components-web/issues"
  },
  "dependencies": {
    "@material/animation": "^0.2.0",
    "@material/base": "^0.1.2",
    "@material/rtl": "^0.1.3",
    "@material/theme": "^0.1.4",
    "@material/typography": "^0.2.1"
  },
  "description": "The Material Components for the web text field component",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "8aeddf74e5bbce38635399e3e3355a8c40725871",
    "tarball": "https://registry.npmjs.org/@material/textfield/-/textfield-0.2.7.tgz"
  },
  "homepage": "https://github.com/material-components/material-components-web#readme",
  "keywords": [
    "material components",
    "material design",
    "textfield"
  ],
  "license": "Apache-2.0",
  "main": "index.js",
  "maintainers": [
    {
      "name": "amsheehan",
      "email": "alex.m.sheehan@gmail.com"
    },
    {
      "name": "bwobrien",
      "email": "obrien.test@gmail.com"
    },
    {
      "name": "cristobalchao",
      "email": "cchao87@gmail.com"
    },
    {
      "name": "ljepsen3541",
      "email": "ljepsen3541@gmail.com"
    },
    {
      "name": "material-admin",
      "email": "traviskaufman+npm@google.com"
    },
    {
      "name": "sgomes",
      "email": "mail@sgomes.io"
    },
    {
      "name": "traviskaufman",
      "email": "travis.kaufman@gmail.com"
    },
    {
      "name": "yeelan0319",
      "email": "yiranmao@gmail.com"
    }
  ],
  "name": "@material/textfield",
  "optionalDependencies": {},
  "readme": "# MDC Textfield\n\nThe MDC Textfield component provides a textual input field adhering to the [Material Design Specification](https://material.google.com/components/text-fields.html).\nIt is fully accessible, ships with RTL support, and includes a gracefully-degraded version that does\nnot require any javascript.\n\n## Installation\n\n```\nnpm install --save @material/textfield\n```\n\n## Usage\n\n### Single-line - with Javascript\n\n```html\n<div class=\"mdc-textfield\">\n  <input type=\"text\" id=\"my-textfield\" class=\"mdc-textfield__input\">\n  <label class=\"mdc-textfield__label\" for=\"my-textfield\">Hint text</label>\n</div>\n```\n\nIt's also possible to wrap an input within a `<label>` to avoid dynamic id generation:\n\n```html\n<label class=\"mdc-textfield\">\n  <input type=\"text\" class=\"mdc-textfield__input\">\n  <span class=\"mdc-textfield__label\">Hint Text</span>\n</label>\n```\n\n> _NOTE_: Only place an `mdc-textfield__label` inside of a text field _if you plan on using\n> Javascript_. Otherwise, the label must go outside of the textfield, as shown below.\n\n### Single-line - Gracefully degraded\n\n```html\n<label for=\"textfield-no-js\">Textfield with no JS: </label>\n<div class=\"mdc-textfield\">\n  <input type=\"text\" id=\"textfield-no-js\" class=\"mdc-textfield__input\" placeholder=\"Hint text\">\n</div>\n```\n\n### Disabled Text Fields\n\n```html\n<div class=\"mdc-textfield mdc-textfield--disabled\">\n  <input type=\"text\" id=\"disabled-textfield\" class=\"mdc-textfield__input\" disabled>\n  <label class=\"mdc-textfield__label\" for=\"disabled-textfield\">Disabled text field</label>\n</div>\n```\n\n### Pre-filled text fields\n\nWhen dealing with JS-driven text fields that already have values, you'll want to ensure that you\nrender the text field label with the `mdc-textfield__label--float-above` modifier class. This will\nensure that the label moves out of the way of the text field's value and prevents a Flash Of\nUn-styled Content (**FOUC**). You'll also want to add the `mdc-textfield--upgraded` modifier class\non the textfield root element. The JS component does for you automatically on initialization, but\nsince it won't be added until that JS runs, adding it manually will prevent an initial FOUC.\n\n```html\n<div class=\"mdc-textfield mdc-textfield--upgraded\">\n  <input type=\"text\" id=\"pre-filled\" class=\"mdc-textfield__input\" value=\"Pre-filled value\">\n  <label class=\"mdc-textfield__label mdc-textfield__label--float-above\" for=\"pre-filled\">\n    Label in correct place\n  </label>\n</div>\n```\n\n### Using help text\n\nMDC Text Fields can include help text that is useful for providing supplemental\ninformation to users, as well for validation messages (covered below).\n\n```html\n<div class=\"mdc-textfield\">\n  <input type=\"text\" id=\"username\" class=\"mdc-textfield__input\" aria-controls=\"username-helptext\">\n  <label for=\"username\" class=\"mdc-textfield__label\">Username</label>\n</div>\n<p id=\"username-helptext\" class=\"mdc-textfield-helptext\" aria-hidden=\"true\">\n  This will be displayed on your public profile\n</p>\n```\n\nHelp text appears on input field focus and disappear on input field blur by default when using\nthe textfield JS component.\n\n#### Persistent help text\n\nIf you'd like the help text to always be visible, add the\n`mdc-textfield-helptext--persistent` modifier class to the element.\n\n```html\n<div class=\"mdc-textfield\">\n  <input type=\"email\" id=\"email\" class=\"mdc-textfield__input\">\n  <label for=\"email\" class=\"mdc-textfield__label\">Email address</label>\n</div>\n<p class=\"mdc-textfield-helptext mdc-textfield-helptext--persistent\">\n  We will <em>never</em> share your email address with third parties\n</p>\n```\n\n#### Help text and accessibility\n\nNote that in every example where the help text is dependent on the state of the input element, we\nassign an id to the `mdc-textfield-helptext` element and set that id to the value of the\n`aria-controls` attribute on the input element. We recommend doing this as well as it will help\nindicate to assistive devices that the display of the help text is dependent on the interaction with\nthe input element.\n\nWhen using our vanilla JS component, if it sees that the input element has an `aria-controls`\nattribute, it will look for an element with the id specified and treat it as the text field's help\ntext element, taking care of adding/removing `aria-hidden` and other a11y attributes. This can also\nbe done programmatically, which is described below.\n\n### Validation\n\nMDC Textfield provides validity styling by using the `:invalid` and `:required` attributes provided\nby HTML5's form validation API.\n\n```html\n<div class=\"mdc-textfield\">\n  <input type=\"password\" id=\"pw\" class=\"mdc-textfield__input\" required minlength=8>\n  <label for=\"pw\" class=\"mdc-textfield__label\">Password</label>\n</div>\n```\n\nAn input's validity is checked via `checkValidity()` on blur, and the styles are updated\naccordingly. When using the `required` attribute, an asterisk will be automatically appended to the\nlabel text, as per the spec.\n\nHelp text can be used to provide additional validation messages. Use\n`mdc-textfield-helptext--validation-msg` to provide styles for using the help text as a validation\nmessage. This can be easily combined with `mdc-textfield-helptext--persistent` to provide a robust\nUX for client-side form field validation.\n\n```html\n<div class=\"mdc-textfield\">\n  <input required minlength=8 type=\"password\" class=\"mdc-textfield__input\" id=\"pw\"\n         aria-controls=\"pw-validation-msg\">\n  <label for=\"pw\" class=\"mdc-textfield__label\">Choose password</label>\n</div>\n<p class=\"mdc-textfield-helptext\n          mdc-textfield-helptext--persistent\n          mdc-textfield-helptext--validation-msg\"\n   id=\"pw-validation-msg\">\n  Must be at least 8 characters long\n</p>\n```\n\n### Multi-line - With Javascript\n\n```html\n<div class=\"mdc-textfield mdc-textfield--multiline\">\n  <textarea id=\"multi-line\" class=\"mdc-textfield__input\" rows=\"8\" cols=\"40\"></textarea>\n  <label for=\"multi-line\" class=\"mdc-textfield__label\">Multi-line Label</label>\n</div>\n```\n\n### Multi-line - Gracefully Degraded\n\n```html\n<label for=\"css-only-multiline\">Multi-line label: </label>\n<div class=\"mdc-textfield mdc-textfield--multiline\">\n  <textarea class=\"mdc-textfield__input\"\n            id=\"css-only-multiline\"\n            rows=\"8\" cols=\"40\"\n            placeholder=\"Tell the world something about yourself!\"></textarea>\n</div>\n```\n\n### Full-width\n\n```html\n<div class=\"mdc-textfield mdc-textfield--fullwidth\">\n  <input class=\"mdc-textfield__input\"\n         type=\"text\"\n         placeholder=\"Full-Width Textfield\"\n         aria-label=\"Full-Width Textfield\">\n</div>\n<div class=\"mdc-textfield mdc-textfield--multiline mdc-textfield--fullwidth\">\n  <textarea class=\"mdc-textfield__input\"\n            placeholder=\"Full-Width multiline textfield\"\n            rows=\"8\" cols=\"40\"\n            aria-label=\"Full-Width multiline textfield\"></textarea>\n</div>\n```\n\n### Using the JS component\n\nMDC Textfield ships with Component / Foundation classes which are used to provide a full-fidelity\nMaterial Design text field component.\n\n#### Including in code\n\n##### ES2015\n\n```javascript\nimport {MDCTextfield, MDCTextfieldFoundation} from 'mdc-textfield';\n```\n\n##### CommonJS\n\n```javascript\nconst mdcTextfield = require('mdc-textfield');\nconst MDCTextfield = mdcTextfield.MDCTextfield;\nconst MDCTextfieldFoundation = mdcTextfield.MDCTextfieldFoundation;\n```\n\n##### AMD\n\n```javascript\nrequire(['path/to/mdc-textfield'], mdcTextfield => {\n  const MDCTextfield = mdcTextfield.MDCTextfield;\n  const MDCTextfieldFoundation = mdcTextfield.MDCTextfieldFoundation;\n});\n```\n\n##### Global\n\n```javascript\nconst MDCTextfield = mdc.textfield.MDCTextfield;\nconst MDCTextfieldFoundation = mdc.textfield.MDCTextfieldFoundation;\n```\n\n#### Automatic Instantiation\n\n```javascript\nmdc.textfield.MDCTextfield.attachTo(document.querySelector('.mdc-textfield'));\n```\n\n#### Manual Instantiation\n\n```javascript\nimport {MDCTextfield} from 'mdc-textfield';\n\nconst textfield = new MDCTextfield(document.querySelector('.mdc-textfield'));\n```\n\n#### MDCTextfield API\n\nSimilar to regular DOM elements, the `MDCTextfield` functionality is exposed through accessor\nmethods.\n\n##### MDCTextfield.helptextElement\n\nHTMLLabelElement. This is a normal property (non-accessor) that holds a reference to the element\nbeing used as the text field's \"help text\". It defaults to `null`. If the text field's input element\ncontains an `aria-controls` attribute on instantiation of the component, it will look for an element\nwith the corresponding id within the document and automatically assign it to this property.\n\n##### MDCTextfield.disabled\n\nBoolean. Proxies to the foundation's `isDisabled/setDisabled` methods when retrieved/set\nrespectively.\n\n### Using the foundation class\n\nBecause MDC Textfield is a feature-rich and relatively complex component, it's adapter is a bit more\ncomplicated.\n\n| Method Signature | Description |\n| --- | --- |\n| addClass(className: string) => void | Adds a class to the root element |\n| removeClass(className: string) => void | Removes a class from the root element |\n| addClassToLabel(className: string) => void | Adds a class to the label element. We recommend you add a conditional check here, and in `removeClassFromLabel` for whether or not the label is present so that the JS component could be used with text fields that don't require a label, such as the full-width text field. |\n| removeClassFromLabel(className: string) => void | Removes a class from the label element |\n| addClassToHelptext(className: string) => void | Adds a class to the help text element. Note that in our code we check for whether or not we have a help text element and if we don't, we simply return. |\n| removeClassFromHelptext(className: string) => void | Removes a class from the help text element. |\n| helptextHasClass(className: string) => boolean | Returns whether or not the help text element contains the current class |\n| setHelptextAttr(name: string, value: string) => void | Sets an attribute on the help text element |\n| removeHelptextAttr(name: string) => void | Removes an attribute on the help text element |\n| registerInputFocusHandler(handler: EventListener) => void | Registers an event listener on the native input element for a \"focus\" event |\n| deregisterInputFocusHandler(handler: EventListener) => void | Un-registers an event listener on the native input element for a \"focus\" event |\n| registerInputBlurHandler(handler: EventListener) => void | Registers an event listener on the native input element for a \"blur\" event |\n| deregisterInputBlurHandler(handler: EventListener) => void | Un-registers an event listener on the native input element for a \"blur\" event |\n| registerInputInputHandler(handler: EventListener) => void | Registers an event listener on the native input element for an \"input\" event |\n| deregisterInputInputHandler(handler: EventListener) => void | Un-registers an event listener on the native input element for an \"input\" event |\n| registerInputKeydownHandler(handler: EventListener) => void | Registers an event listener on the native input element for a \"keydown\" event |\n| deregisterInputKeydownHandler(handler: EventListener) => void | Un-registers an event listener on the native input element for a \"keydown\" event |\n| getNativeInput() => {value: string, disabled: boolean, checkValidity: () => boolean}? | Returns an object representing the native text input element, with a similar API shape. The object returned should include the `value` and `disabled` properties, as well as the `checkValidity()` function. We _never_ alter the value within our code, however we _do_ update the disabled property, so if you choose to duck-type the return value for this method in your implementation it's important to keep this in mind. Also note that this method can return null, which the foundation will handle gracefully. |\n\n#### The full foundation API\n\n##### MDCTextfieldFoundation.isDisabled() => boolean\n\nReturns a boolean specifying whether or not the input is disabled.\n\n##### MDCTextfieldFoundation.setDisabled(disabled: boolean)\n\nUpdates the input's disabled state.\n\n### Theming\n\nMDC Textfield components use the configured theme's primary color for its underline and label text\nwhen the input is focused.\n\nMDC Textfield components support dark themes.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/material-components/material-components-web.git"
  },
  "scripts": {},
  "version": "0.2.7"
}
